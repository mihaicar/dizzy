{"version":3,"file":"http-wrapper.service.js","sourceRoot":"","sources":["file:///C:/work/corda-samples/simm-valuation-demo/src/main/web/tmp/broccoli_type_script_compiler-input_base_path-ZHoDtSjD.tmp/0/src/app/http-wrapper.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { Http } from '@angular/http';\r\nimport { environment } from './environment';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class HttpWrapperService {\r\n\r\n  private counterparty: string;\r\n\r\n  constructor(private http: Http, private router: Router) {\r\n    // because components listen on newCounterparty,\r\n    // they need to know there is a new value when view is switched\r\n    router.events.subscribe((event) => {\r\n      if (event instanceof NavigationEnd) { //NavigationEnd?\r\n        this.emitNewCounterparty();\r\n      }\r\n    });\r\n  }\r\n\r\n  //new CP events\r\n\r\n  private emitNewCounterparty() {\r\n    if (this.counterparty) {\r\n      this.newCounterparty.emit({\r\n        value: this.counterparty\r\n      });\r\n    }\r\n  }\r\n  public newCounterparty: EventEmitter < any > = new EventEmitter();\r\n\r\n  // end new CP events\r\n\r\n\r\n  // CP getter and setter\r\n\r\n  public setCounterparty(cp) {\r\n    this.counterparty = cp;\r\n    this.emitNewCounterparty();\r\n    return cp; //chainable\r\n  }\r\n  public getCounterparty() {\r\n    return this.counterparty;\r\n  }\r\n\r\n  // end CP getter and setter\r\n\r\n\r\n  // HTTP helpers\r\n\r\n  private getPath(resource) {\r\n    return environment.APIPath + resource;\r\n  }\r\n\r\n  // end HTTP helpers\r\n\r\n\r\n  // HTTP methods\r\n\r\n  public getWithCounterparty(resource): any {\r\n    return this.http.get(this.getPath(this.counterparty + \"/\" + resource)).map(res => res.json());\r\n  }\r\n\r\n  public postWithCounterparty(resource, data): any {\r\n    return this.http.post(this.getPath(this.counterparty + \"/\" + resource), data).map(res => res.json());\r\n  }\r\n\r\n  public putWithCounterparty(resource, data): any {\r\n    return this.http.put(this.getPath(this.counterparty + \"/\" + resource), data).map(res => res.json());\r\n  }\r\n\r\n  public getAbsolute(resource): any {\r\n    return this.http.get(this.getPath(resource)).map(res => res.json());\r\n  }\r\n\r\n  // end HTTP methods\r\n\r\n\r\n\r\n  // *****************************************\r\n  // Demo magic - delayed data for valuations\r\n  // *****************************************\r\n\r\n  private subscription;\r\n  private step: number = 0;\r\n  private updateDelayedData(data) {\r\n    if (!data.portfolio) {\r\n      return; // data hasn't fully returned yet, don't do anything\r\n    }\r\n\r\n    var delayedData: any = {};\r\n\r\n    if(this.step > 0) {\r\n      delayedData.portfolio = data.portfolio;\r\n      delayedData.portfolio.agreed = (this.step > 1);\r\n    }\r\n\r\n    if(this.step > 2) {\r\n      delayedData.marketData = data.marketData;\r\n      delayedData.marketData.agreed = (this.step > 3);\r\n    }\r\n\r\n    if(this.step > 4) {\r\n      delayedData.sensitivities = data.sensitivities;\r\n      delayedData.sensitivities.agreed = (this.step > 5);\r\n    }\r\n\r\n    if(this.step > 6) {\r\n      delayedData.initialMargin = data.initialMargin;\r\n      delayedData.initialMargin.agreed = (this.step > 7);\r\n    }\r\n\r\n    if(this.step > 8) {\r\n      delayedData.confirmation = data.confirmation;\r\n      delayedData.confirmation.agreed = (this.step > 9);\r\n    }\r\n\r\n    if(this.step == 10) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n    return delayedData;\r\n  }\r\n\r\n  public startDelayedTimer() {\r\n    this.step = 0;\r\n\r\n    // every x second, update data\r\n    let timer = Observable.timer(1000, 2000);\r\n    this.subscription = timer.subscribe(t => { this.step++; });\r\n  }\r\n\r\n  public getDelayedData(data): any {\r\n    return this.updateDelayedData(data)\r\n  }\r\n\r\n  // *****************************************\r\n  // end demo magic\r\n  // *****************************************\r\n}\r\n"]}