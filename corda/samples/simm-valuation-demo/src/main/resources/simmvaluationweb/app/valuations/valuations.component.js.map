{"version":3,"file":"valuations.component.js","sourceRoot":"","sources":["file:///C:/work/corda-samples/simm-valuation-demo/src/main/web/tmp/broccoli_type_script_compiler-input_base_path-ZHoDtSjD.tmp/0/src/app/valuations/valuations.component.ts"],"names":[],"mappings":"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","sourcesContent":["/* beautify preserve:start */\r\ndeclare var $;\r\n/* beautify preserve:end */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { HttpWrapperService } from '../http-wrapper.service';\r\nimport { Observable } from 'rxjs/Rx';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'app-valuations',\r\n  templateUrl: 'valuations.component.html',\r\n  styleUrls: ['valuations.component.css'],\r\n  directives: []\r\n})\r\nexport class ValuationsComponent implements OnInit {\r\n  private data: any = {};\r\n  private formattedData: any = {\r\n    sensitivitiesCurves: []\r\n  };\r\n  private fullData: any = {};\r\n  private businessDate: string;\r\n  private timer;\r\n  private timerSubscription;\r\n  private counterpartySubscription;\r\n\r\n  // show loading spinner when clicked and data is not all received\r\n  private calculateClicked: boolean;\r\n\r\n  private startCalculations() {\r\n    console.log(\"Starting calculations\")\r\n    this.fullData = {};\r\n    this.data = {}; // outdated data, delete it\r\n    this.calculateClicked = true; // show loading spinners\r\n\r\n    // demo magic - this is to ensure we use the right valuation date\r\n    this.httpWrapperService.postWithCounterparty(\"portfolio/valuations/calculate\", { valuationDate: \"2016-06-06\" } )\r\n      .toPromise().then((data) => {\r\n        this.fullData = data;\r\n        this.businessDate = data.businessDate; // in case it's valuations for a different date now\r\n        this.httpWrapperService.startDelayedTimer(); // demo magic\r\n        this.getData();\r\n      });\r\n  }\r\n\r\n  private getData() {\r\n    this.data = this.httpWrapperService.getDelayedData(this.fullData);\r\n\r\n    if (this.data && this.data.sensitivities) {\r\n      this.formattedData.sensitivitiesCurves = this.getSensitivitiesCurves(this.data.sensitivities);\r\n    }\r\n\r\n    // scroll to bottom of page\r\n    let spinners = document.getElementById(\"loadingSpinners\");\r\n    if (spinners) {\r\n      setTimeout(() => {\r\n        $(\"html, body\").animate({ scrollTop: $(document).height() }, 1000);\r\n      }, 100); // wait for spinners to have gone below latest element\r\n    }\r\n  }\r\n\r\n  // TODO: make this independent from the actual curve names\r\n  private getSensitivitiesCurves(sensitivities) {\r\n    let formattedSensitivities = []; // formattedSensitivities\r\n\r\n    // loop on the first curve, knowing that the other curves have the same values\r\n    for (let key in sensitivities.curves[\"EUR-DSCON-BIMM\"]) {\r\n      if (sensitivities.curves[\"EUR-DSCON-BIMM\"].hasOwnProperty(key)) {\r\n        let obj = {\r\n          tenor: key, //3M, 6M etc...\r\n          \"EUR-DSCON-BIMM\": sensitivities.curves[\"EUR-DSCON-BIMM\"][key],\r\n          \"EUR-EURIBOR3M-BIMM\": sensitivities.curves[\"EUR-EURIBOR3M-BIMM\"][key]\r\n        };\r\n        formattedSensitivities.push(obj);\r\n      }\r\n    }\r\n\r\n    return formattedSensitivities;\r\n  }\r\n\r\n  constructor(private httpWrapperService: HttpWrapperService) {}\r\n\r\n  ngOnInit() {\r\n    this.httpWrapperService.getAbsolute(\"business-date\").toPromise().then((data) => {\r\n      this.businessDate = data.businessDate;\r\n    }).catch((error) => {\r\n      console.log(\"Error loading business date\", error);\r\n    });\r\n\r\n    // check for new data periodically\r\n    // higher timeout because makes debugging annoying, put to 2000 for production\r\n    this.timer = Observable.timer(0, 2000);\r\n    this.timerSubscription = (this.timer.subscribe(() => this.getData()));\r\n\r\n    // but also check for new data when counterparty changes\r\n    this.counterpartySubscription = this.httpWrapperService.newCounterparty.subscribe((state) => {\r\n      this.getData();\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.timerSubscription.unsubscribe();\r\n    this.counterpartySubscription.unsubscribe();\r\n  }\r\n\r\n}\r\n"]}